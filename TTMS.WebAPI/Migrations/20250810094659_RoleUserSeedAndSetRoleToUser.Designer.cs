// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTMS.Infrastructure;

#nullable disable

namespace TTMS.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250810094659_RoleUserSeedAndSetRoleToUser")]
    partial class RoleUserSeedAndSetRoleToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TTMS.Domain.Entities.Tasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TTMS.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e76c76d-4cf6-4784-8796-fd9f5c8cf29d"),
                            ConcurrencyStamp = "8/10/2025 1:02:01 AM",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("23fe4e81-5015-42a0-8d76-d1f08c6b227a"),
                            ConcurrencyStamp = "8/10/2025 1:02:03 AM",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = new Guid("b7a80d7e-24d8-4cc3-8981-ee4e1b5b1b3a"),
                            ConcurrencyStamp = "4/19/2025 1:02:04 AM",
                            Name = "Employee",
                            NormalizedName = "AUTHOR"
                        });
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2073e8-d2ce-46b2-863b-3aac8d29d163"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b20a20f-40a0-4f82-bbf4-8c6995d4091a",
                            Email = "admin@demo.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DEMO.COM",
                            NormalizedUserName = "ADMIN@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPv1uwjqNLu2C9rkru6m7yllqLpPOqke5Y1sJktzmrf2LcWrYNNoNVU+JU1r89mcng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee4bfc33-f7b1-4a2f-9a97-cc0c923b0493",
                            TwoFactorEnabled = false,
                            UserName = "admin@demo.com"
                        },
                        new
                        {
                            Id = new Guid("a036ccd4-08fc-4fe6-b217-adc8f84386fc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35b88d79-5b64-4f9c-a6b5-8d9bbba5bc1b",
                            Email = "manager@demo.com",
                            EmailConfirmed = true,
                            FullName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@DEMO.COM",
                            NormalizedUserName = "MANAGER@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPv1uwjqNLu2C9rkru6m7yllqLpPOqke5Y1sJktzmrf2LcWrYNNoNVU+JU1r89mcng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a27b30aa-6f6f-4fc0-bf8c-38cc9e7f2835",
                            TwoFactorEnabled = false,
                            UserName = "manager@demo.com"
                        },
                        new
                        {
                            Id = new Guid("1e945b04-5cd5-419e-ae40-5185eb5a94d5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b498b47-6d94-44f0-8f89-4b1840d26034",
                            Email = "employee@demo.com",
                            EmailConfirmed = true,
                            FullName = "Employee",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@DEMO.COM",
                            NormalizedUserName = "EMPLOYEE@DEMO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPv1uwjqNLu2C9rkru6m7yllqLpPOqke5Y1sJktzmrf2LcWrYNNoNVU+JU1r89mcng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c9f38b3-a1b4-4a0d-b5f6-0ee6f6a42f0a",
                            TwoFactorEnabled = false,
                            UserName = "employee@demo.com"
                        });
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1a2073e8-d2ce-46b2-863b-3aac8d29d163"),
                            RoleId = new Guid("5e76c76d-4cf6-4784-8796-fd9f5c8cf29d")
                        },
                        new
                        {
                            UserId = new Guid("a036ccd4-08fc-4fe6-b217-adc8f84386fc"),
                            RoleId = new Guid("23fe4e81-5015-42a0-8d76-d1f08c6b227a")
                        },
                        new
                        {
                            UserId = new Guid("1e945b04-5cd5-419e-ae40-5185eb5a94d5"),
                            RoleId = new Guid("b7a80d7e-24d8-4cc3-8981-ee4e1b5b1b3a")
                        });
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TTMS.Domain.Entities.Tasks", b =>
                {
                    b.HasOne("TTMS.Domain.Entities.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("TTMS.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("TTMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("TTMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("TTMS.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTMS.Infrastructure.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("TTMS.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TTMS.Domain.Entities.Team", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
